#include <LPC17xx.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define RS_CTRL 0x00000100   // P0.8
#define EN_CTRL 0x00000200   // P0.9
#define DT_CTRL 0x000000F0   // P0.4 to P0.7

unsigned long int init_command[] = {0x30, 0x30, 0x30, 0x20, 0x28, 0x0C, 0x06, 0x01, 0x80};
unsigned long int temp1 = 0, temp2 = 0, i, j, var1, var2;
unsigned char flag1 = 0, flag2 = 0;
unsigned char msg[] = {"ALCOHOL%:"};
unsigned char msg2[] = {"Level: "};

// Calibration offset for alcohol sensor 
#define NORMAL_AIR_OFFSET 23.3  

void delay(unsigned int r1) {
    unsigned int r;
    for (r = 0; r < r1; r++);
}

void lcd_init(void);
void lcd_write(void);
void port_write(void);
void lcd_print_msg(void);
void lcd_print_msg2(void);

int main(void) {
    unsigned int sensorReading;
    char disp_level[10];
    char disp_level_padded[7];  // For padded display text
    char percentageStr[14];
    float alcohol_percentage;

    SystemInit();
    SystemCoreClockUpdate();
    LPC_PINCON->PINSEL1 |= (1<<14);  // Function 1 on P0.23 for AD0
    LPC_SC->PCONP |= (1<<12);        // Peripheral power supply for ADC
    LPC_GPIO0->FIODIR = DT_CTRL | RS_CTRL | EN_CTRL;  // LCD control pins

    lcd_init();  // Initialize LCD
    lcd_print_msg();  // Display "ALCOHOL%:"
    lcd_print_msg2(); // Display "Level:"

    while(1) {
        // ADC Reading
        LPC_ADC->ADCR = (1<<0) | (1<<21) | (1<<24) | (0x02<<8);  // Configure ADC for 12-bit conversion
        while (((sensorReading = LPC_ADC->ADGDR) & 0X80000000) == 0);  // Wait for conversion to finish

        sensorReading = (LPC_ADC->ADGDR >> 4) & 0xFFF;  // Get the 12-bit result from ADC

        
        alcohol_percentage = (float)sensorReading * 100.0 / 4095.0;

        // Adjust for the calibration offset 
        alcohol_percentage -= NORMAL_AIR_OFFSET;

        
        if (alcohol_percentage < 0) {
            alcohol_percentage = 0;
        }

       
        sprintf(percentageStr, " %.1f%% ", alcohol_percentage);

       
        if (alcohol_percentage >= 50.0) {
            strcpy(disp_level, "HIGH");
        } else if (alcohol_percentage >= 20.0) {
            strcpy(disp_level, "MEDIUM");
        } else {
            strcpy(disp_level, "LOW");        }

        // Pad disp_level to 6 characters to clear leftovers
        snprintf(disp_level_padded, 7, "%-6s", disp_level);

        // LCD Display Update
        temp1 = 0x89; flag1 = 0; lcd_write(); delay(800);
        i = 0; flag1 = 1;
        while (disp_level_padded[i] != '\0') {
            temp1 = disp_level_padded[i];
            lcd_write();
            i++;
        }

        temp1 = 0xC5; flag1 = 0; lcd_write(); delay(800);
        i = 0; flag1 = 1;
        while (percentageStr[i] != '\0') {
            temp1 = percentageStr[i];
            lcd_write();
            i++;
        }

        delay(1000000);  // Delay between readings
    }
}

void lcd_init(void) {
    unsigned int x;
    flag1 = 0;
    for (x = 0; x < 9; x++) {
        temp1 = init_command[x];
        lcd_write();
    }
    flag1 = 1;
}

void lcd_write(void) {
    flag2 = (flag1 == 1) ? 0 : ((temp1 == 0x30) || (temp1 == 0x20)) ? 1 : 0;
    temp2 = temp1 & 0xf0;
    port_write();
    if (flag2 == 0) {
        temp2 = temp1 & 0x0f;
        temp2 = temp2 << 4;
        port_write();
    }
}

void port_write(void) {
    LPC_GPIO0->FIOPIN = temp2;
    if (flag1 == 0) {
        LPC_GPIO0->FIOCLR = RS_CTRL;
    } else {
        LPC_GPIO0->FIOSET = RS_CTRL;
    }
    LPC_GPIO0->FIOSET = EN_CTRL;
    delay(25);
    LPC_GPIO0->FIOCLR = EN_CTRL;
    delay(3000000);
}

void lcd_print_msg(void) {
    unsigned int a;
    for (a = 0; msg[a] != '\0'; a++) {
        temp1 = msg[a];
        lcd_write();
    }
}

void lcd_print_msg2(void) {
    temp1 = 0xC0; flag1 = 0; lcd_write();
    delay(800);
    i = 0; flag1 = 1;
    while (msg2[i] != '\0') {
        temp1 = msg2[i];
        lcd_write();
        i++;
    }
}
